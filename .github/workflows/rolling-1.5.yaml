---
name: VyOS Rolling (1.5)

on:
  workflow_dispatch:
  schedule:
    - cron: 0 6 * * 1

env:
  VYOS_URL: https://github.com/vyos/vyos-build
  VYOS_BRANCH: current
  VYOS_ARCH: amd64
  VYOS_BUILD_BY: autobuild-vyos@samipsolutions.fi
  VYOS_BUILD_TYPE: release
  VYOS_VERSION: 1.5-rolling
  VYOS_KERNEL_VERSION: v6.1.63

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      # Need permission to write to the Releases tab now.
      # https://github.com/ncipollo/release-action/issues/208.
      contents: write
    container:
      image: vyos/vyos-build:current
      options: --privileged
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: custom-patches
          sparse-checkout: |
            patches
      - name: Generate Token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92 # v1.8.0
        id: generate-token
        with:
          app_id: "${{ secrets.BOT_APP_ID }}"
          private_key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Setup variables
        id: vars
        run: |
          build_date=$(date -u +%d%m%YT%H%M)
          echo "tag-name=${{ env.VYOS_VERSION }}-${build_date}" >> "$GITHUB_OUTPUT"
          echo "iso-name=${{ env.VYOS_VERSION }}-${build_date}-${{ env.VYOS_ARCH }}" >> "$GITHUB_OUTPUT"

      - name: Clone vyos-build
        run: git clone -b ${{ env.VYOS_BRANCH }} --single-branch ${{ env.VYOS_URL }}

      - name: Download sops deb
        uses: robinraju/release-downloader@768b85c8d69164800db5fc00337ab917daf3ce68 # v1.7
        with:
          repository: mozilla/sops
          latest: true
          fileName: "*amd64.deb"
          out-file-path: vyos-build/packages

      - name: Copy custom patches to linux-kernel folder
        run: |
          cp -Rv custom-patches/ vyos-build/packages/linux-kernel/
          mv -v vyos-build/packages/linux-kernel/custom-patches/patches/linux-kernel/build-intel-ixgbe.sh vyos-build/packages/linux-kernel/

      - name: Restore cached kernel and module sources
        id: cache-kernel-restore
        uses: buildjet/cache/restore@v3
        with:
          path: |
            vyos-build/packages/linux-kernel/linux
            vyos-build/packages/linux-kernel/kernel-vars
            vyos-build/packages/linux-kernel/linux-firmware
            vyos-build/packages/linux-kernel/accel-ppp
            vyos-build/packages/linux-kernel/**/*.deb
          key: ${{ runner.os }}-${{ env.VYOS_KERNEL_VERSION }}

      - name: Fetch kernel sources
        working-directory: vyos-build/packages/linux-kernel
        if: steps.cache-kernel-restore.outputs.cache-hit != 'true'
        run: git clone -b ${{ env.VYOS_KERNEL_VERSION }} --single-branch https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git

      - name: Fetch linux-firmware sources
        working-directory: vyos-build/packages/linux-kernel
        if: steps.cache-kernel-restore.outputs.cache-hit != 'true'
        run: |
          git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git
          cd linux-firmware && git checkout 20230625

      - name: Compile kernel
        working-directory: vyos-build/packages/linux-kernel
        if: steps.cache-kernel-restore.outputs.cache-hit != 'true'
        run: |
          sudo ./build-kernel.sh

      - name: Compile linux firmware
        working-directory: vyos-build/packages/linux-kernel
        if: steps.cache-kernel-restore.outputs.cache-hit != 'true'
        run: |
          ./build-linux-firmware.sh

      - name: Compile Accel-PPP out-of-tree module
        working-directory: vyos-build/packages/linux-kernel
        if: steps.cache-kernel-restore.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/accel-ppp/accel-ppp.git
          cd accel-ppp && git checkout 9669bcb99adc && cd ..
          ./build-accel-ppp.sh

      - name: Compile Intel QAT (Quick-Assist Technology) drivers
        working-directory: vyos-build/packages/linux-kernel
        if: steps.cache-kernel-restore.outputs.cache-hit != 'true'
        run: |
          ./build-intel-qat.sh

      - name: Save kernel and some of the module sources to cache
        uses: buildjet/cache/save@v3
        if: steps.cache-kernel-restore.outputs.cache-hit != 'true'
        id: kernel-cache
        with:
          path: |
            vyos-build/packages/linux-kernel/linux
            vyos-build/packages/linux-kernel/kernel-vars
            vyos-build/packages/linux-kernel/linux-firmware
            vyos-build/packages/linux-kernel/accel-ppp
            vyos-build/packages/linux-kernel/**/*.deb
          key: ${{ runner.os }}-${{ env.VYOS_KERNEL_VERSION }}

      - name: Symlink kernel
        run: |
          mkdir -p /usr/src
          ln -sv $GITHUB_WORKSPACE/vyos-build/packages/linux-kernel/linux /usr/src/linux

      - name: Debug ls of packages and linux-kernel folder
        run: |
          ls -al vyos-build/packages
          ls -al vyos-build/packages/linux-kernel/

      - name: Restore cached ixgbe kernel module
        id: kernel-module-ixgbe-cache-restore
        uses: buildjet/cache/restore@v3
        with:
          path: |
            vyos-build/packages/linux-kernel/ixgbe**
          key: ${{ runner.os }}-${{ env.VYOS_KERNEL_VERSION }}-ixgbe

      - name: Compile ixgbe module
        working-directory: vyos-build/packages/linux-kernel
        if: steps.kernel-module-ixgbe-cache-restore.outputs.cache-hit != 'true'
        run: |
          sudo ./build-intel-ixgbe.sh

      - name: Save ixgbe module to cache
        uses: buildjet/cache/save@v3
        if: steps.kernel-module-ixgbe-cache-restore.outputs.cache-hit != 'true'
        id: kernel-module-ixgbe-cache
        with:
          path: |
            vyos-build/packages/linux-kernel/ixgbe-5.19.6/*
          key: ${{ runner.os }}-${{ env.VYOS_KERNEL_VERSION }}-ixgbe

      - name: "Create symbolic links for cached .deb files"
        if: steps.cache-kernel-restore.outputs.cache-hit == 'true' || steps.kernel-module-ixgbe-cache-restore.outputs.cache-hit == 'true'
        shell: bash
        run: |
          cd vyos-build/packages/linux-kernel
          for package in $(ls linux-*.deb)
          do
              ln -sf linux-kernel/$package ..
          done

      - name: Configure
        working-directory: vyos-build
        run: |
          sudo make clean
          sudo ./build-vyos-image iso \
              --architecture ${{ env.VYOS_ARCH }} \
              --build-by ${{ env.VYOS_BUILD_BY }} \
              --build-type ${{ env.VYOS_BUILD_TYPE }} \
              --build-comment "VyOS with additional packages and custom kernel" \
              --version ${{ steps.vars.outputs.tag-name }} \
              --custom-package "git" \
              --custom-package "iptables" \
              --custom-package "jo" \
              --custom-package "vim" \
              --custom-package "moreutils" \
              --custom-package "python3-venv" \
              --custom-package "tree" \
              --custom-package "age"

      - name: Create release with artifact
        uses: ncipollo/release-action@6c75be85e571768fa31b40abf38de58ba0397db5 # v1.13.0
        with:
          token: "${{ steps.generate-token.outputs.token }}"
          tag: "v${{ steps.vars.outputs.tag-name }}"
          artifacts: "./vyos-build/build/vyos-${{ steps.vars.outputs.iso-name }}.iso"
          artifactErrorsFailBuild: true
          body: |
            Official VyOS Changelog:
            https://docs.vyos.io/en/latest/changelog/1.5.html

      - name: Delete orphaned release
        if: failure()
        uses: dev-drprasad/delete-tag-and-release@5eafd8668311bf3e4d6c1e9898f32a317103de68 # v0.2.1
        env:
          github_token: "${{ steps.generate-token.outputs.token }}"
        with:
          tag_name: "v${{ steps.vars.outputs.tag-name }}"
          delete_release: true

      - name: Remove old releases
        uses: dev-drprasad/delete-older-releases@v0.2.1
        with:
          keep_latest: 120
          delete_tags: true
        env:
          GITHUB_TOKEN: "${{ steps.generate-token.outputs.token }}"
